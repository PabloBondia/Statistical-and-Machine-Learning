knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
df <- read_csv(file = "blood_pressure.csv") %>%
select(-class)
df
View(df)
model1 <- lm(bp ~ age + weight, data = df)
summary(model1)
model2 <- lm(bp ~ age * weight, data = df)
summary(model2)
summary(model1)$adj.r.squared  # Model without interaction
summary(model2)$adj.r.squared  # Model with interaction
summary(model1)$adj.r.squared  # Model without interaction
summary(model2)$adj.r.squared  # Model with interaction
summary(model2)$coefficients
plot(model1$fitted.values, residuals(model1),
main = "Residuals vs. Fitted",
xlab = "Fitted Values",
ylab = "Residuals",
pch = 20)
abline(h = 0, col = "red")
qqnorm(residuals(model1))
qqline(residuals(model1), col = "red")  # Normality line
qqnorm(residuals(model1))
qqline(residuals(model1), col = "red")  # Normality line
shapiro.test(residuals(model1))
plot(model1$fitted.values, residuals(model1),
main = "Residuals vs. Fitted",
xlab = "Fitted Values",
ylab = "Residuals",
pch = 20)
abline(h = 0, col = "red")
library(lmtest)
bptest(model1)
new_data <- data.frame(age = c(12, 60), weight = c(35000, 250000))
predicted_bp <- predict(model1, newdata = new_data)
print(predicted_bp)
als_data <- read_rds("../week1/ALS_progression_rate.1822x370.rds")
als_data <- read_rds("ALS_progression_rate.1822x370.rds")
als_data <- read_rds("ALS_progression_rate.1822x370.rds")
als_data <- read_rds("ALS_progression_rate.1822x370.rds")
als_data <- read_rds("ALS_progression_rate.1822x370.rds")
als_data <- als_data %>%
filter(!is.na(dFRS))
View(als_data)
als_data <- read_rds("ALS_progression_rate.1822x370.rds")
als_data <- als_data %>%
filter(!is.na(dFRS))
# Cargar librerías necesarias
library(tidyverse)
library(caret)
install.packages("tidymodels")
als_data <- read_rds("ALS_progression_rate.1822x370.rds")
als_data <- als_data %>%
filter(!is.na(dFRS))
# Cargar librerías necesarias
library(tidyverse)
library(caret)
install.packages("caret", dependencies = TRUE)
als_data <- read_rds("ALS_progression_rate.1822x370.rds")
als_data <- als_data %>%
filter(!is.na(dFRS))
# Cargar librerías necesarias
library(tidyverse)
library(caret)
# 3️⃣ Definir control para validación cruzada (10-fold CV, repetido 5 veces)
cv_control <- trainControl(method = "repeatedcv",
number = 10,  # 10 folds
repeats = 5)  # 5 repeticiones
# 4️⃣ Definir la fórmula del modelo (usar todas las variables predictoras)
model_formula <- dFRS ~ .
# 5️⃣ Ajustar el modelo con regresión lineal y validación cruzada
lm_cv_model <- train(model_formula,
data = als_data,
method = "lm",
trControl = cv_control,
metric = "RMSE")
# 6️⃣ Imprimir resultados del modelo
print(lm_cv_model)
# 7️⃣ Obtener el RMSE en validación cruzada
cv_rmse <- lm_cv_model$results$RMSE
cat("RMSE en validación cruzada:", mean(cv_rmse), "\n")
# 8️⃣ Ajustar el modelo sin validación cruzada (para obtener RMSE en training)
lm_train_model <- lm(model_formula, data = als_data)
# 9️⃣ Calcular RMSE en datos de entrenamiento
train_predictions <- predict(lm_train_model, newdata = als_data)
train_rmse <- sqrt(mean((als_data$dFRS - train_predictions)^2))
cat("RMSE en datos de entrenamiento:", train_rmse, "\n")
plot(model1)
